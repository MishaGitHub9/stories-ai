import { anthropic, CLAUDE_CONFIG } from '@/config/api';

export type TranslationLanguage = 'ukrainian' | 'german' | 'polish' | 'french' | 'spanish';

// –í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è Claude API (–≤ USD –∑–∞ 1M —Ç–æ–∫–µ–Ω—ñ–≤)
const CLAUDE_PRICING = {
  'claude-3-5-haiku-20241022': {
    input: 0.25, // $0.25 per 1M input tokens
    output: 1.25, // $1.25 per 1M output tokens
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É
function calculateTranslationCost(inputTokens: number, outputTokens: number, model: string): number {
  const pricing = CLAUDE_PRICING[model as keyof typeof CLAUDE_PRICING];
  if (!pricing) {
    console.warn(`Unknown model pricing for: ${model}`);
    return 0;
  }
  
  const inputCost = (inputTokens / 1000000) * pricing.input;
  const outputCost = (outputTokens / 1000000) * pricing.output;
  const totalCost = inputCost + outputCost;
  
  return totalCost;
}

export class TranslationService {
  private static getLanguageMap(): { [key in TranslationLanguage]: string } {
    return {
      ukrainian: 'Ukrainian',
      german: 'German', 
      polish: 'Polish',
      french: 'French',
      spanish: 'Spanish'
    };
  }

  private static getTranslationExamples(language: TranslationLanguage): string {
    const examples = {
      ukrainian: `"Hello" ‚Üí "–ü—Ä–∏–≤—ñ—Ç", "Thank you" ‚Üí "–î—è–∫—É—é", "How are you?" ‚Üí "–Ø–∫ —Å–ø—Ä–∞–≤–∏?"`,
      german: `"Hello" ‚Üí "Hallo", "Thank you" ‚Üí "Danke", "How are you?" ‚Üí "Wie geht es dir?"`,
      polish: `"Hello" ‚Üí "Cze≈õƒá", "Thank you" ‚Üí "Dziƒôkujƒô", "How are you?" ‚Üí "Jak siƒô masz?"`,
      french: `"Hello" ‚Üí "Bonjour", "Thank you" ‚Üí "Merci", "How are you?" ‚Üí "Comment allez-vous?"`,
      spanish: `"Hello" ‚Üí "Hola", "Thank you" ‚Üí "Gracias", "How are you?" ‚Üí "¬øC√≥mo est√°s?"`
    };
    return examples[language];
  }

  private static async translateWithAI(text: string, targetLanguage: TranslationLanguage = 'ukrainian'): Promise<string> {
    try {
      const languageMap = this.getLanguageMap();
      const targetLang = languageMap[targetLanguage];

      const response = await anthropic.messages.create({
        model: CLAUDE_CONFIG.model,
        max_tokens: 200,
        temperature: 0.3,
        system: `You are a professional English to ${targetLang} translator.

TASK: Translate the given English text to ${targetLang}.
REQUIREMENTS:
- Provide ONLY the ${targetLang} translation
- Keep the same tone and formality level
- Preserve formatting if present

EXAMPLES: ${this.getTranslationExamples(targetLanguage)}

Translate to ${targetLang}:`,
        messages: [
          {
            role: 'user',
            content: text
          }
        ]
      });

      if (response.content[0].type === 'text') {
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        const inputTokens = response.usage?.input_tokens || 0;
        const outputTokens = response.usage?.output_tokens || 0;
        const totalCost = calculateTranslationCost(inputTokens, outputTokens, CLAUDE_CONFIG.model);
        
        console.log(`üé≠ Translation:`);
        console.log(`Input tokens: ${inputTokens}`);
        console.log(`Output tokens: ${outputTokens}`);
        console.log(`Cost: $${totalCost.toFixed(6)}`);
        
        return response.content[0].text.trim();
      }
      
      throw new Error('Unexpected response format from Claude');
    } catch (error: any) {
      console.error('Translation API Error:', error);
      return '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É';
    }
  }

  // Fallback simple translations for common phrases
  private static simpleTranslations: { [key: string]: string } = {
    'hello': '–ø—Ä–∏–≤—ñ—Ç',
    'hi': '–ø—Ä–∏–≤—ñ—Ç',
    'thank you': '–¥—è–∫—É—é',
    'thanks': '–¥—è–∫—É—é',
    'please': '–±—É–¥—å –ª–∞—Å–∫–∞',
    'yes': '—Ç–∞–∫',
    'no': '–Ω—ñ',
    'good': '—Ö–æ—Ä–æ—à–∏–π',
    'bad': '–ø–æ–≥–∞–Ω–∏–π',
    'big': '–≤–µ–ª–∏–∫–∏–π',
    'small': '–º–∞–ª–∏–π',
    'house': '–±—É–¥–∏–Ω–æ–∫',
    'food': '—ó–∂–∞',
    'water': '–≤–æ–¥–∞',
    'friend': '–¥—Ä—É–≥',
    'family': '—Å—ñ–º\'—è',
    'work': '—Ä–æ–±–æ—Ç–∞',
    'home': '–¥—ñ–º',
    'school': '—à–∫–æ–ª–∞',
    'book': '–∫–Ω–∏–≥–∞',
    'phone': '—Ç–µ–ª–µ—Ñ–æ–Ω',
    'time': '—á–∞—Å',
    'day': '–¥–µ–Ω—å',
    'night': '–Ω—ñ—á',
    'red': '—á–µ—Ä–≤–æ–Ω–∏–π',
    'blue': '—Å–∏–Ω—ñ–π',
    'green': '–∑–µ–ª–µ–Ω–∏–π',
    'yellow': '–∂–æ–≤—Ç–∏–π',
    'black': '—á–æ—Ä–Ω–∏–π',
    'white': '–±—ñ–ª–∏–π',
    'one': '–æ–¥–∏–Ω',
    'two': '–¥–≤–∞',
    'three': '—Ç—Ä–∏',
    'four': '—á–æ—Ç–∏—Ä–∏',
    'five': '–ø\'—è—Ç—å',
  };

  static async translate(text: string, targetLanguage: TranslationLanguage = 'ukrainian'): Promise<string> {
    // Try AI translation first
    try {
      const aiTranslation = await this.translateWithAI(text, targetLanguage);
      if (aiTranslation && aiTranslation !== '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É') {
        return aiTranslation;
      }
    } catch (error) {
      console.log('AI translation failed, using fallback');
    }

    // Fallback to simple translations (only for Ukrainian)
    if (targetLanguage === 'ukrainian') {
      const cleanText = text.toLowerCase().trim();
      return this.simpleTranslations[cleanText] || text;
    }

    return text; // Return original text for other languages if AI fails
  }

  static async getTranslation(text: string, targetLanguage: TranslationLanguage = 'ukrainian'): Promise<{ original: string; translation: string }> {
    const translation = await this.translate(text, targetLanguage);
    const errorMessages = {
      ukrainian: '–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
      german: '√úbersetzung nicht gefunden',
      polish: 'T≈Çumaczenie nie znalezione',
      french: 'Traduction non trouv√©e',
      spanish: 'Traducci√≥n no encontrada'
    };
    
    const result = {
      original: text,
      translation: translation === text ? errorMessages[targetLanguage] : translation
    };
    
    return result;
  }
}